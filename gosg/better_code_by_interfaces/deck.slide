Better Code by Interfaces
ü§ùüë∂üëßüßí
Tags: golang, interface

Stanley Nguyen
Software Engineer, Xendit
hung.ngn.the@gmail.com
https://stanleynguyen.me
@stanley_ngn

* OOP Civil War
.image images/civil-war.jpg

: not here to ignite the religious war between these guys in OOP but rather to promote good usage of this feature in programming languages & Go specifically

* <code />
.background images/lego.png

: codes are like lego pieces. As engineer, we break requirements down into small pieces and fill them in with the suitable blocks

* Products
.image images/millenium-falcon.jpg

: To build awesome systems, products like this Millenium Falcon

* Interfaces

.image images/lego-buttons.png

: interfaces are like those buttons to lego blocks. It tells users how and which pieces of legos should be fitted together

* Interfaces
- communication
- agreement
- abstraction

.image images/goshapes.png

: So what's the definition of interface? It's a means for different parts of the system to communicate their needs, agree on behaviors, and provide an nice layer of abstraction against these

* Interface in Go

.image images/spectrum.png

: interface in Go is unique, the approach that Go takes is somewhere in between the extreme duck typing of Python where everything can accept anything and Java approach where a class needs to explicitly implements an interface for it to be satisfied. A bit about my background, I started with Node, a mostly ducktype language with lots and lots of run-time errors then went on to Java with big ass interfaces the contains thoundsands of methods and needs to be changed whenever I try to update some classes. I found the point where Go is at a nice balance.

* Interface in Go
- way to specify behaviors for a type
- a set of methods

.code code/example/main.go /EXAMPLE START OMIT/,/EXAMPLE END OMIT/

: In Go specifically, interface is a way to specify behaviors for a type. This boils down to a set of method signatures

* Interface in Go
- satisfied implicitly

.code code/human/person.go /START OMIT/,/END OMIT/

: interfaces in Go are implicitly satisied. This human struct type implements human without mentioning anything about the interface

* Interface in Go

.play code/example/main.go /PLAY START OMIT/,/PLAY END OMIT/

: let's have a look at this example. This askForName function accept an instance of any type that implements Human interface so I'm passing a person named Peter. And as expected, he replied with his name.

* Interface in Go

Write interfaces for code that you don't own

.image images/mindblown.gif

: This simple idea of implicit implementation opens up a lot of possibilities for code quality improvement by giving control back to the dependency users, of which I will explain in the next few sections

* Polymorphism
The ability of an object to take on many forms

.image images/matrix.jpg

: with that introduction to Go interfaces as context, let's dive in the most basic usage of interface - Polymorphism

* Polymorphism in Go

.code code/example/main.go /EXAMPLE START OMIT/,/EXAMPLE END OMIT/

.code code/human/alien.go /START OMIT/,/END OMIT/

: remember that example Human interface that I introduce at the start? Now we have a HumanLikeAlien type that knows how to say its name, but in reverse order.

* Polymorphism in Go

.play code/poly/main.go /PLAY START OMIT/,/PLAY END OMIT/

: now if I'm to execute that askForName function on an alien. He will be able to answer too, as he is very much human-like

* Polymorphism in Go

.image images/sparta.jpg

: so that's polymorphism in Go, the same polymorphism that allow you to do dependency injection, test mocking, etc

* Abstraction

.background images/abstract.png

: you might be asking? So what makes Go interface different from whatever that I'm getting in Java or C#? Just keep that in mind, we're going to explore that in this section

* Abstraction

.code code/poly/main.go /COMPARE START OMIT/,/COMPARE END OMIT/

.image images/thinking.jpg

: which one of this functions would you rather have in your code. Anyone would like to answer?

* Abstraction

- dependency injection
- mocking
- writing generic code

.image images/fiveyears.jpg

* Be conservative in what you do, be liberal in what you accept from others
~ Robustness Principle ~

.image images/mindblown.gif

: there's also a software development principle called Robustness that mindblew me the first time I knew about it. Yes, I went litterally like that.

* Robustness with Go interface

Accept interfaces, return structs

  func funcName(i INTERFACE) CONCRETETYPE

.image images/gopherlifting.gif
.caption artwork by [[https://twitter.com/marcusolsson][Marcus Olsson]]

: Robustness principle translated into Go is simply `Accept interfaces, return structs`. This's the powerful idea that I promised at the start my presentation, which Go facilitates and eases the implementation with its implicit satisfaction

* Declaring interfaces at callsites

.code code/example/main.go /ALL START OMIT/,/ALL END OMIT/

* Why returning concrete type?

.image images/rollsafe.jpg

: some of you might be asking why we should return concrete type, instead of an interface with all of the methods

* The bigger the interface, the weaker the abstraction - Rob Pike

.background images/rob.png

: I have a short and sweet answer for you from Go very own birthing father - Rob Pike.

* Bigger interface == weaker abstraction

.code code/human/jack.go /START OMIT/,/END OMIT/

.image images/thinking.jpg

: which one of these 2 guys' job can you guess? It's no doubt out sailor Jack Sparrow. Interfaces are abstractions and the bigger the interface, the weaker the abstraction. Go introduce implicit satisfaction in its interface to facilitate small interface declaration at callsites.

* Bigger interface == weaker abstraction
No jack-of-all-trade without a clear purpose

.image images/no.gif

: So please don't return a jack-of-all-trade interface without a clear purpose in your Go code, for the sake of your teammates' sanity

* Empty interface

- An interface that doens't have any methods

  interface{}

- Allows functions to take in any data type without checking

: I have just warned you about the danger of interfaces with too many methods. How about its counter part - an empty interface?

* Empty interface

.play code/empty/main.go /START OMIT/,/END OMIT/

* Empty interface

.play code/empty2/main.go /START OMIT/,/END OMIT/

: this pattern can be very useful for pub/sub model where the subscribers don't know sort of messages it's going to receive but rather have to deal with them all

* Empty interface

.image images/empty.jpg

: By using the empty interface in code you are essentially giving your compiler zero knowledge about the data coming in, so all of the benefits of a statically typed language go out the door. The compiler no longer has the ability to tell you that you made a mistake and passed it the wrong data type. You are left to check for errors like that on your own, and you won‚Äôt be able to find any bugs until runtime.

* Take-Aways

- Always inject dependencies
- Declare interfaces at callsites
- Be careful with empty interface in Go

* üíª WE ARE HIRING üíª
[[https://www.xendit.co/en/careers][https://www.xendit.co/en/careers]]

.image images/xenditlovego.png









