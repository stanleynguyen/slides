Go in Enterprise Context
The next language for large-scale enterprise development?
Tags: golang, enterprise, beginner

Stanley Nguyen
Software Engineer, Xendit
stanley@xendit.co
https://stanley.win
@stanley_ngn

* Golang

- compiled, concurrent, garbage-collected, statically typed
- small, opionionated
- efficient, scalable, and productive

.image images/gocloud.jpg
.caption _Gophers_building_a_cloud_system_ by [[https://www.instagram.com/reneefrench/][Renée French]]

: Mình chắc là hầu hết mọi người đều đã biết về Go nhưng mà mình sẽ giới thiệu sơ qua. Go là một ngôn ngữ biên dịch, concurrent, garbage-collected, và là một ngôn ngữ statically typed. Go rất nhẹ và opinionated nên rất nhanh, scalable mà không làm giảm hiệu suất công việc của devs. Go không được tạo ra với vai trò là một bước đột phá trong programming language design mà là một công cụ hữu ích trong những projects lớn.

* Creators of Go
.image images/creators.png
.caption _Robert_Griesemer,_Rob_Pike,_Ken_Thompson_(left_to_right)_

: Vậy ai là cha đẻ của Go? Rob Pike, Ken Thompson, and Robert Griesemer. Họ cũng là những khối óc đằng sau sự phát triển cũng UNIX, Linux, Javascript V8 Engine. Nếu bạn hỏi chúng ta có thể tin tưởng ai để viết một hệ thống software reliable và scalable thì đây sẽ là những cái tên đầu tiên mà chúng ta nghĩ tới.

* Golang
.image images/googletrend.png
.caption _Golang_on_Google_Trends_

: Từ khi nó được sinh ra, Go ngày càng nhận được nhiều sự quan tâm. Nhưng quan trọng hơn hết là liệu sự quan tâm này có phải chỉ là nhất thời? Hay là Go sẽ thay đổi software development, trở thành một ngôn ngữ thiết yếu của các công ty lớn?

* What's an enterprise?
.background images/faang.jpg

: Trước khi chúng ta bắt đầu trao đổi chuyên sâu hơn, hãy cùng định nghĩa enterprise là gì và điều đó có ý nghĩa gì đối với việc phát triển software.

* ❌❌
.image images/corp_joke.jpg

: Disclaimer, cái enterprise mà mình định nói ở đây không phải là những cái corporates với  rất nhiều tầng middle management mà không ai nhớ hết được. Điều này có ảnh hưởng, partly, đến những khó khăn mà lập trình viên ở những tổ chức lớn này phải đối mặt nhưng nó không phải là vấn đề chính mà chúng ta sẽ bàn luận hôm nay.

* ✔️✔️
.image images/faang_architecture.png

: Cái enterprise mà mình đang nói tới ở đây thuộc về phạm trù kĩ thuật. Mình đang nói đến những cái công ty với cả ngàn kĩ sư làm việc với cả triệu dòng code mà sẽ chạy trên ty tỷ các cái clusters, machines, và data centers trên khắp thế giới. Những công ty như là Amazon, Netflix. Những công ty mà chỉ cần nhìn vào service map của họ thôi bạn đã thấy choáng ngợp.

* ✔️✔️
.image images/gcp_datacenter.jpg

: Và Go được sinh ra trong chính hoàn cảnh đó, để giảm bớt khó khăn cho những team lập trình viên ở Google, những người giành phần lớn thời gian của họ phát triển những hệ thống khổng lồ.

* Challenges in Enterprise Software Development
.background images/facepalm_gopher.png

: Vậy khó khăn trong việc phát triển phần mềm cho những công ty lớn là gì? Tại sao làm việc với hệ thống lớn lại khó hơn? Và điều gì là trở ngại cho lập trình viên làm việc với những hệ thống này?

* Slow builds

.image images/slow_builds.jpg

: Với nhiều code hơn to be begin with, và những bộ phận của hệ thống được liên tục phát triển và tăng cường, builds của những hệ thống này có thể chiếm một phần lớn thời gian làm việc trong ngày của lập trình viên. Trước đây có thời điểm mình đã in cái meme này và dán lên trên cái workstation của mình as a joke vì lúc đó mình phải làm việc với một cái Java codebase mà thường phải mất 15 phút mới compile xong.

* Developers' opinions

.image images/choices.jpg

: Một vẫn đề khác trong khi làm việc với large-scale enterprises là chúng ta thường có quá nhiều devs đề mà thống nhất quan điểm về một cách giải quyết bài toán. Đây cũng chính là lí do vì sao chúng ta chia các team lớn theo monolith thành các team nhỏ hơn làm việc với microservices. Đây cũng là lí do vì sao những cộng đồng như JS nghĩ ra công cụ linting mà có cả triệu downloads hàng tuần như là eslint.

* Maintainability

.image images/confusing_code.jpeg

: Với việc có nhiều lựa chọn để giải quyết một vấn đề cụ thể, devs cũng sẽ có nhiều thứ để mà bận tâm hơn, và tất nhiên là chúng ta sẽ phải context switch nhiều hơn trong lúc đọc code, làm lãng phí thời gian quý báu của devs. Những chương trình được viết theo các phong cách khác nhau, sử dụng các khái niệm, các syntactic sugars thường sẽ làm tốn thời gian của devs vào những việc vô bổ như là tìm documentations cho những phương thức mà chả có ma nào dùng.

* Maintainability

.image images/lack_of_docs.png

: Đó, cùng với việc code được viết ra mà chẳng có tài liệu đi kèm sẽ khiến cho cái việc maintain codebases của chúng ta như kiểu thách đố người khác.

* Maintainability

.image images/silos_graph.png

: Và khi mà lập trình viên ai cũng mù mờ về codebase thì thời gian delivery của chúng ta sẽ dài hơn đáng kể trong khi hiệu quả làm việc đi xuống trầm trọng.

* ... and a host of other problems

- uncontrolled dependencies
- costly updates
- difficulty in writing automation tools

.image images/this_is_fine.png

: Và còn một cơ số các vấn đề khác mà devs gặp phải khi làm việc với hệ thống lớn như là uncontrolled dependencies, costly updates, và khó khăn trong việc viết automation tools. Chúng ta không thể cứ vờ như đây là một phần của công việc hằng ngày của lập trình viên. Nên là 10 năm trước thì Go team đã quyết định phải thay đổi cách mà software đáng ra phải được phát triển.

* How does Go address these developers' pains?
.background images/gopher_teach_w_background.png

: Vậy Go đã giải quyết hiệu quả những vấn đề này như thế nào?

* Dependencies in Go

- no circular, unused dependency
- dependency hoisting

  import "github.com/spf13/cobra"

.image images/movinggopher.png
.caption _Moving_gopher_ by [[https://github.com/ashleymcnamara][Ashley McNamara]]

: Thứ đầu tiên mà Go làm khác bọt và hiệu quả so với các ngôn ngữ lập trình khác là cách quản lí dependencies qua việc gộp chúng lại và cấm việc import các dependencies không được sử dụng và circular dependencies.

* Unused dependencies

.image images/error.png

: Việc cấm import dependencies không được sử dụng đảm bảo tính chính xác của Go dependency tree, đảm bảo rằng nó không có những nhánh thừa thãi. Unused dependencies trong Go là một lỗi lúc compile có vẻ như chỉ là một thay đổi nhỏ, nhưng thực tế mục đích của nó là thay đổi lối suy nghĩ của engineering teams. Trước đây mình đã thấy những câu lệnh import không được sử dụng, được committed từ cả tỉ năm trước nhưng chẳng ai thèm quan tâm vì mọi thứ vẫn compile, chỉ chậm thôi.

* No Cyclic dependency

.image images/circular_dependency.jpg

: Circular dependencies: Mặc dù là trong một số trường hợp thì có vẻ tiện nhưng thường thì nó đi kèm rất nhiều vấn đề. Dependency tree của bạn, thay vì là một mô hình rễ cây, thì sẽ xoắn lại thành một mô hình vòng tròn mà khó có thể tách rời. Mô hình rất tệ đối với compiler vì để mà compile được code thì nó sẽ phải load toàn bộ dependency tree của bạn. Hơn thế, việc cấm circular dependencies sẽ hướng devs tới việc suy nghĩ cẩn thận hơn về system design của họ và phân chia cụ thể các concerns.

* Dependency Hoisting
- Single object file approach
TLDR

  package A imports package B
  package B imports package C
  package A does *not* import package C

: Dependency hoisting: Việc gộp dependencies có thể hiểu đơn giản là chỉ tạo ra một object file (hay trong C còn gọi là header file) đối với mỗi dependency mà chương trình của bạn import. Nói ngắn gọn thì đối với compiler của Go, package A imports package B while package B imports package C nhưng mà package A không imports package C. Chắc các bạn sẽ hỏi là tại sao lại có thể như thế được và làm như thế thì hiệu quả hơn ở chỗ nào. Việc gộp dependencies có nghĩa là khi mà compiler compiles package A, thì nó sẽ đọc object file của package B mà trong đó gộp tất cả thông tin của package C mà B cần. Điều đó có nghĩa là số lượng object files mà Go compiler cần phải mở chỉ bằng đúng số lượng import statements trên program mà nó đang compile. Thay vì là như trong C và C++ với mô hình includes trong includes header files, compiler của Go sẽ không phải mở những cái header files mà nó không phụ thuộc vào. Theo Go team thì việc này làm giảm 40 lần số lượng files mà Go compiler phải mở so với C compiler để compile monorepo của Google.

* Dependencies in Go
- 50 times faster than C++ according to Go Team benchmark
.image images/compiling.png
.caption _comic_ by [[https://xkcd.com/][xkcd]]

: Phương thức compile này kết hợp với việc cấm unused và circular dependencies thì giúp cho Go compiler hiệu quả tới mức mà "biến phút thành giây, biến coffee breaks thành interactive builds". Rất tiếc là bạn không có thời gian đi cà phê cà pháo nữa nhưng cũng đồng nghĩa là chúng ta có thể hoàn thành công việc sớm hơn và có nhiều thời gian dành cho bản thân, gia đình và bạn bè hơn.

* Syntax
- 25 keywords
- name before type
.code code/trivial/main/syntax.go /START NAME OMIT/,/END NAME OMIT/

: Moving on to syntax. Syntax của Go được thiết kế với sự đơn giản đặt lên hàng đầu. Go chỉ có 25 từ khoá, so với 37 của C và 84 của C++. Trong Go thì tên biến được đặt trước kiểu dữ liệu và có thể tối giản thành derived syntax như trong Pascal

* Functions

- no default argument
.code code/trivial/main/syntax.go /START ARG OMIT/,/END ARG OMIT/
.code code/trivial/main/syntax.go /START ARGBOOL OMIT/,/END ARGBOOL OMIT/

: Functions: Một trong những feature mà Go team cố tình không đưa vào là default arguments. Default arguments làm cho việc chắp vá các lỗi trong design public interface của package dễ dàng hơn, và thành phẩm là một đống arguments lộn xộn và vô cùng khó hiểu. Việc loại bỏ default arguments bắt buộc devs phải khai báo nhiều methods hơn giúp cho package interface dễ hiểu và được phân chia rõ ràng hơn. Một ví dụ đơn giản là gỉa sử như công ty của bạn stream movies và bắt đầu với một số lượng phim rất nhỏ mà thường sẽ query tất cả một lúc, nhưng sau đó bạn phát triển lớn hơn và có nhiều hạng mục Movies khác nhau. Nếu không dùng Go thì bạn có thể thêm các parameters vào function của mình để thay đổi nó như nhu cầu hiện tại nhưng như thế rõ ràng là rất khó hiểu so với việc bạn extend interface của mình thêm các methods rõ ràng cho từng mục đích khác nhau. Lựa chọn này của Go team là minh chứng cho việc Go là một nỗ lực giúp cho dev teams làm việc cẩn thận và hiệu quả hơn.

* Functions

- multiple return values
.play -edit code/trivial/main/syntax.go /START FN OMIT/,/END FN OMIT/

: Go functions không có default arguments nhưng chúng ta có thể có nhiều hơn một return values. So sánh với các ngôn ngữ khác, devs không cần khai báo những types mới chỉ để trả về nhiều hơn một giá trị. Ở đây mình có một phương trình ví dụ sẽ trả về một câu chào nhưng đôi khi cũng sẽ trả về một lỗi tuỳ độ may mắn của mình. Giờ mình sẽ chạy thử nó ... Việc mà một function có thể trả về nhiều giá trị giúp Go có một error handling pattern mà chỉ coi errors như là một giá trị bình thường. Mình sẽ nói thêm về cái này ở phần sau.

* Naming

Exported vs Un-exported

.code code/trivial/main/syntax.go /Exported/,/NotExported/

.image images/mic_drop.png
.caption Gopher Mic Drop by [[https://github.com/ashleymcnamara][Ashley McNamara]]

: Naming: Trong Go, việc khai báo visbility của một function chỉ đơn giản là chữ cái đầu tiên viết hoa hay thường. Viết hoa là exported viết thường là unexported, không còn nhưng keywords kiểu như private public protected mà phần lớn những người dùng nó sẽ phải Google bảng scope mỗi lần dùng. Như vậy chữ cái đầu tiên của tên function chỉ có một mục đích duy nhất là visibility so với việc nó được dùng tuỳ tâm như trong JavaScript. Devs sẽ bớt đi một mối bận tâm về convention của team. Again, simplicity for productivity.

* Concurrency
- Designed in the age of multicore and networked machines
- A variant of Communicating Sequential Processes (CSP) with first-class channels
- "Don't communicate by sharing memory, share memory by communicating"
.image images/goroutines.png

: Ngôn ngữ như Java, C, mặc dù rất phổ biến nhưng đều được tạo ra từ nhưng năm 80-90 khi mà hầu hết các CPUs chỉ có một core và các hệ thống hầu như chỉ chạy trên một máy chủ duy nhất. Kết quả là lập trình bất đồng bộ chỉ là một ý tưởng được thêm vào sau này. Còn đối với Go thì nó là một trong những ưu tiên hàng đầu với bộ syntax high-level rất dễ sử dụng. Với Go, bạn có thể lập trình bất đồng bộ dễ dàng và an toàn với châm ngôn "..."

* Concurrency

.code code/channels/main.go /EXAMPLE START OMIT/,/EXAMPLE END OMIT/
.code code/channels/main.go /DELAY START OMIT/,/DELAY END OMIT/
.play code/channels/main.go /MAIN START OMIT/,/MAIN END OMIT/

: Để lập trình bất đồng bộ trong Go, bạn chỉ cần biết 2 khái niệm đơn giản: goroutines, và channels. goroutine là những luồng gọn nhẹ trên userspace. Chúng tương ứng với khái niệm coroutines ở các ngôn ngữ lập trình khác, không phải là một khái niệm đột phá mới. Nhưng vì việc chúng rất dễ sử dụng và có hiệu năng cao, goroutines đã góp phần làm cho khái niệm coroutines được áp dụng rộng rãi hơn ở một cái kỉ nguyên mà chúng ta phải gửi rất nhiều API calls để đáp ứng với kiến trúc microservice. Channels, chúng ta có thể nghĩ đến channels như là những kênh mà dữ liệu có thể được gửi qua lại giữa các goroutines khác nhau để đảm bảo chúng ta không phải share memory và dẫn tới các race conditions khó hiểu. Ở đây mình có một phương trình ví dụ dùng goroutines để chạy 5 luồng khác nhau in ra nhưng con số từ 1 đến 5. <Chạy>

* Go take on OOP

- Go is data orientied

  type Person struct {
    Name string
  }

- interfaces in Go are just sets of methods and satisfied implicitly
.code code/trivial/composition.go /START OMIT/,/END OMIT/
- Composition over inheritance

: Go is data-oriented. Cái struct type tối giản nhất trong Go đơn giàn là cấu trúc dữ liệu mà có thể đóng vai trò là một method receiver. Chúng ta có thể nói nó tương đương với Java's classes. Go dùng interface để triển khai tính đa hình. Trong Go thì không có từ khoá implements mà các interfaces được thoả mãn ngầm. Điều này rất quan trọng vì giờ devs có thể khai báo những interfaces nhỏ ngay tại nơi mà nó được dùng như là một chỗ trống để có thể inject implementation của những gói khác mà chương trình phụ thuộc vào. Điều này sẽ đảm bảo dependency inversion vì giờ các gói trong hệ thống được tách biệt rõ ràng khỏi nhau. Một best practice quan trọng khác nữa trong Object Oriented Programming là composition over inheritance được Go đảm bảo bằng việc loại bỏ hoàn toàn classes. Classes là thứ mà nếu dùng một cách thái quá sẽ dẫn đến những hậu quả nghiêm trọng khó có thể sửa được trong các codebases lớn. Chắc hẳn mọi người đều đã nghe câu chuyện về import một quả chuối nhưng lại nhận được cả con khỉ và cánh rừng.

* Go take on OOP

.code code/composition/main.go /START FOUNDER OMIT/,/END FOUNDER OMIT/
.code code/composition/main.go /START PITCH OMIT/,/END PITCH OMIT/

: To see these above ideas in action, mình có function Pitch mà sẽ nhận kiểu interface Founder mà có một ý tưởng business cùng với một ý tưởng về Tech.

* Go take on OOP

.code code/composition/main.go /START TYPE OMIT/,/END TYPE OMIT/

: Chúng ta có thể triển khai một struct thoả mãn interface Founder trên bằng việc triển khai một BusinessGuy với ý tưởng business và một TechieGuy với ý tưởng về Tech và embed chúng trong một struct khác gọi là AspiredEntrepreneur. Đó chính là composition - viết những concerns thành các modules nhỏ tách biệt rồi gộp chúng cho những nhu cầu lớn hơn.

* Go take on OOP

.play code/composition/main.go /START MAIN OMIT/,/END MAIN OMIT/

: Cuối cùng chúng ta có thể ném thằng AspiredEntrepreneur này vào một cái pitch để nó làm việc. Và mặc dù là không có từ khoá implements nhưng mà elon musk của chúng ta vẫn có thể pitch thành công với vai trò của một Founder. <Chạy> Go loại bỏ những thứ không cần thiết để hướng devs theo những cái best practices.

* Errors
- errors in Go are just values
- deliberately simple
.image images/gopherscable.png

: Errors trong Go đơn giản là nhưng giá trị bình thường mà có thể được trả về từ các functions, hay là làm arguments trong function calls. Go team thiết kế errors trong Go như thế này để giúp cho chương trình viết ra được rõ ràng và dễ đọc hơn. Những cách handle error như là try-catch-finally bóp méo control flows của chương trình vì chúng xen kẽ và chồng chéo với flow bình thường của chương trình. Errors theo cách của Go có vẻ sẽ dài dòng hơn nhưng rành mạch và dễ hiểu hơn.

* Errors
.code code/errors/main.go
.code code/errors/index.js

: Ở đây mình có một ví dụ so sánh giữa hai chương trình giống nhau được viết trong Go và JavaScript. Nhìn vào chương trình được viết bởi Go, chúng ta có thể dễ dàng nhận ra happy flow theo chiều dọc ngoài cùng, errors được xử đẹp và cụ thể ở trong những cái blocks có indentation. So với chương trình được viết bằng JavaScript với những nested blocks thì chương trình viết bằng Go rõ ràng là dễ đọc hơn.

* Tooling
- integrated within the language design
- gofmt, golint, etc
.image images/gopherswrench.jpg

: Last but not least, tooling. Đây là một chủ đề mà thường ít khi được đưa vào những cuộc thảo luận về ngôn ngữ lập trình nhưng thực tế nó là một phần cực kì quan trong trong hệ sinh thái của mỗi ngôn ngữ. Và devs thì thường thích cãi nhau về những cái quan điểm khác nhau này. Chúng ta nên dùng PrettierJS hay là StandardJS, Airbnb hay là Google coding standards? Go chấm hết những tranh cái nãy bằng việc đưa tooling vào native support như là gofmt dùng để format source files, hay là golint dùng để kiểm tra code standards. Với những cái built-in tools này thì developers sẽ chỉ còn tập trung vào những vấn đề thực sự quan trọng.

* How can Go help my organisation?
.background images/gopherlifting.gif

: Và đó là những cách mà Go giúp cho devs giải quyết vấn đề của họ và làm việc hiệu quả hơn. Điều này có ý nghĩa gì trên scale của một tổ chức? Như là đã nói trong các phần trước, chúng ta đồng ý là Go rất đơn giản. Nhưng sự đơn giản này thực tế lại vô cùng hiệu quả với nhiều lợi ích to lớn.

* Go is simple
- opionated => focus on things that matter
- straightforward, readable => easy to maintain, to onboard new hires
.image images/gophercodereview.png

: Các bạn đã bao giờ nhận được pull request review comments kiểu như "Em có thể sửa một chút này cho nó ngắn hơn được không?". Có nhiều lần mà mình đã dành tầm 80% công sức sau review chỉ để sửa cho code của mình đẹp hơn theo quan điểm của người đánh giá. Go's simple and opinionated design tiết kiệm thời gian cho cả người viết và người review code, để chúng ta chỉ cần tập trung vào những vấn đề thực sự thiết yếu. Sự đơn giản của Go cũng giúp nó vô cùng dễ đọc. btw cái slides này được viết bằng gói gopresent. Mấy hôm trước mình vừa cố đưa nó lên heroku để host nhưng gặp một số vần đề. Nhưng thay vì Google và cầu nguyện ai đó đã gặp lỗi này trước rồi, mình chui vào Github đọc code và sau 15 phút thì mình đã sửa được nó. Hãy tưởng tượng sự dễ đọc này lên scale của những công ty với cả triệu dòng code, cả ngàn lập trình viên. Chúng ta sẽ tiết kiệm được rất nhiều thì giờ và chi phí. Devs của chúng ta cũng sẽ vui vẻ và chửi nhau ít hơn.

* Go is stable
- backward-compatibility
- commercially backed open source

.image images/ian.jpg
.caption _Ian_Lance_Taylor_at_Gopherpalooza_2018_

: Go cũng rất stable. Một trong những yếu tố làm nên thành công của Java là backward-compatibility. Java dùng từ khoá deprecated để giúp cho code của bạn không bị bể khi update lên version mới hơn của dependencies. Team Go cũng tập trung rất nhiều về khoản này. Ian, một trong những người đứng sau Go phiên bản 2, nói rằng: "We're looking at the success of C with not that many changes, and the success of Java with not that many changes, and we want stability" Go cũng được dùng bởi những công ty rất lớn như là Google, Uber, Netflix với những khoản đầu tư khổng lồ. Nếu các công ty ấy tin tưởng Go, mình nghĩ là nó sẽ còn được dùng dài lâu.

* Go is scalable
- cross-compilation
- small memory foot-print
- small deployment size
.image images/godocker.jpg

: Go is scalable. Compile chéo ở trong Go đơn giản chỉ là đặt một cái environment variable cho build command. Chúng ta có thể compile chéo cho những hệ điều hành khác nhau như là windows, linux, darwin, hay ngay cả android và nhưng kiến trúc khác nhau như arm, i386. Bạn cần gì, Go có nó. Không như Java, hay Python, hay JavaScript, những chương trình của go không cần cơ sở hạ tầng phức tạp như JVM, V8 Engine để chạy, tiết kiệm cho chúng ta hàng trăm MBs RAM, đồng nghĩa với tiết kiệm chi phí cho cloud providers như là AWS, GCP. Với sự phổ biến của kiến trúc microservice với cả đống Docker images chúng ta phải deploy, hãy tưởng tượng việc thay vì deploy những cái Node/Java images nặng 200MB, chúng ta chỉ cần deploy những cái images nặng 10 hay 20 MB với Go binaries. Khối lượng dữ liệu mà chúng ta phải trao đổi với image registry sẽ khác biệt rất lớn và hệ quả là những ứng dụng viết bằng Go có thể được deploy nhanh và thường xuyên hơn, giúp cho devs đưa những updates quan trọng đến production.

* @enterprises
.background images/keepcalmnusego.png

: So enterprises, please keep calm and use Go
